{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WebView A tiny cross-platform webview library to create a common HTML5 UI abstraction layer frontend with your favorite programming language as the backend! This library is written in C/C++ and has bindings for many others. See the sidebar for an API reference in each specific language. It supports two-way JavaScript bindings (to call JavaScript from the backend-language and to call the backend-language from JavaScript). It uses Cocoa/WebKit on macOS, gtk-webkit2 on Linux and Edge on Windows 10. Dependancies Windows Linux MacOs","title":"WebView"},{"location":"#webview","text":"A tiny cross-platform webview library to create a common HTML5 UI abstraction layer frontend with your favorite programming language as the backend! This library is written in C/C++ and has bindings for many others. See the sidebar for an API reference in each specific language. It supports two-way JavaScript bindings (to call JavaScript from the backend-language and to call the backend-language from JavaScript). It uses Cocoa/WebKit on macOS, gtk-webkit2 on Linux and Edge on Windows 10.","title":"WebView"},{"location":"#dependancies","text":"Windows Linux MacOs","title":"Dependancies"},{"location":"about/license/","text":"WebView is licensed under the MIT License. You can see more info here . This website is licensed under the Mit License. You can find and contribute to the source here .","title":"License"},{"location":"bindings/c/","text":"Building For a full example showing how to compile your C backend alongside WebView, see our webview_c repository. See https://github.com/webview/webview/blob/master/webview.h#L37 for the built in C API.","title":"C"},{"location":"bindings/c/#building","text":"For a full example showing how to compile your C backend alongside WebView, see our webview_c repository. See https://github.com/webview/webview/blob/master/webview.h#L37 for the built in C API.","title":"Building"},{"location":"bindings/cpp/","text":"API webview::webview webview(bool debug = false, void *wnd = nullptr) webview::set_title void set_title(const std::string title) webview::set_size void set_size(int width, int height, int hints) webview::navigate void navigate(const std::string url) webview::run void run() Compiling Linux c++ main.cc `pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0` -o webview-example MacOS c++ main.cc -std=c++11 -framework WebKit -o webview-example Windows (x64) The webview.exe file will be in the build directory. script/build.bat Examples Hello World: #include \"webview.h\" int main() { webview::webview w(true, nullptr); w.set_title(\"Minimal example\"); w.set_size(480, 320, WEBVIEW_HINT_NONE); w.navigate(\"https://en.m.wikipedia.org/wiki/Main_Page\"); w.run(); return 0; } Complex Example: #include \"webview.h\" #include <iostream> int main() { webview::webview w(true, nullptr); w.set_title(\"Example\"); w.set_size(480, 320, WEBVIEW_HINT_NONE); w.set_size(180, 120, WEBVIEW_HINT_MIN); w.bind(\"noop\", [](std::string s) -> std::string { std::cout << s << std::endl; return s; }); w.bind(\"add\", [](std::string s) -> std::string { auto a = std::stoi(webview::json_parse(s, \"\", 0)); auto b = std::stoi(webview::json_parse(s, \"\", 1)); return std::to_string(a + b); }); w.navigate(R\"V0G0N(data:text/html, <!doctype html> <html> <body>hello</body> <script> window.onload = function() { document.body.innerText = `hello, ${navigator.userAgent}`; noop('hello').then(function(res) { console.log('noop res', res); }); add(1, 2).then(function(res) { console.log('add res', res); }); }; </script> </html> )V0G0N\"); w.run(); return 0; }","title":"C++"},{"location":"bindings/cpp/#api","text":"","title":"API"},{"location":"bindings/cpp/#webviewwebview","text":"webview(bool debug = false, void *wnd = nullptr)","title":"webview::webview"},{"location":"bindings/cpp/#webviewset_title","text":"void set_title(const std::string title)","title":"webview::set_title"},{"location":"bindings/cpp/#webviewset_size","text":"void set_size(int width, int height, int hints)","title":"webview::set_size"},{"location":"bindings/cpp/#webviewnavigate","text":"void navigate(const std::string url)","title":"webview::navigate"},{"location":"bindings/cpp/#webviewrun","text":"void run()","title":"webview::run"},{"location":"bindings/cpp/#compiling","text":"","title":"Compiling"},{"location":"bindings/cpp/#linux","text":"c++ main.cc `pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0` -o webview-example","title":"Linux"},{"location":"bindings/cpp/#macos","text":"c++ main.cc -std=c++11 -framework WebKit -o webview-example","title":"MacOS"},{"location":"bindings/cpp/#windows-x64","text":"The webview.exe file will be in the build directory. script/build.bat","title":"Windows (x64)"},{"location":"bindings/cpp/#examples","text":"Hello World: #include \"webview.h\" int main() { webview::webview w(true, nullptr); w.set_title(\"Minimal example\"); w.set_size(480, 320, WEBVIEW_HINT_NONE); w.navigate(\"https://en.m.wikipedia.org/wiki/Main_Page\"); w.run(); return 0; } Complex Example: #include \"webview.h\" #include <iostream> int main() { webview::webview w(true, nullptr); w.set_title(\"Example\"); w.set_size(480, 320, WEBVIEW_HINT_NONE); w.set_size(180, 120, WEBVIEW_HINT_MIN); w.bind(\"noop\", [](std::string s) -> std::string { std::cout << s << std::endl; return s; }); w.bind(\"add\", [](std::string s) -> std::string { auto a = std::stoi(webview::json_parse(s, \"\", 0)); auto b = std::stoi(webview::json_parse(s, \"\", 1)); return std::to_string(a + b); }); w.navigate(R\"V0G0N(data:text/html, <!doctype html> <html> <body>hello</body> <script> window.onload = function() { document.body.innerText = `hello, ${navigator.userAgent}`; noop('hello').then(function(res) { console.log('noop res', res); }); add(1, 2).then(function(res) { console.log('add res', res); }); }; </script> </html> )V0G0N\"); w.run(); return 0; }","title":"Examples"}]}